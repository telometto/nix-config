name: Auto Format
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "**.nix"
      - "**.sh"
      - "**.yml"
      - "**.yaml"
      - "**.md"
      - "**.json"
  push:
    branches: [main, testing]
    paths:
      - "**.nix"
      - "**.sh"
      - "**.yml"
      - "**.yaml"
      - "**.md"
      - "**.json"

permissions:
  contents: write
  pull-requests: write

jobs:
  format:
    runs-on: ubuntu-latest
    # Run on PRs from same repo, or on direct pushes to main/testing
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) ||
      (github.event_name == 'push' && contains(fromJson('["main", "testing"]'), github.ref_name))

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # For PRs, checkout the PR branch; for pushes, use default ref
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Check and format files
        id: check-formatting
        continue-on-error: true
        run: |
          # Run formatter and check if any files were changed
          if nix fmt; then
            echo "Formatting completed successfully"
          else
            echo "Warning: Formatting encountered issues but continuing..."
          fi

          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes were made by formatter"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            formatted_files=$(git diff --cached --name-only)
            git commit -m "style: automatic formatting by treefmt [skip ci]"
            
            # Push to appropriate branch based on event type
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              git push origin HEAD:${{ github.event.pull_request.head.ref }}
            else
              git push origin HEAD:${{ github.ref_name }}
            fi
            
            echo "formatted=true" >> "$GITHUB_OUTPUT"
            {
              echo "formatted-files<<EOF"
              printf '%s\n' "$formatted_files"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          else
            echo "No formatting changes needed"
            echo "formatted=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on PR if formatted
        if: steps.check-formatting.outputs.formatted == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@main
        env:
          FORMATTED_FILES: ${{ steps.check-formatting.outputs.formatted-files }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            const formattedFiles = (process.env.FORMATTED_FILES || '')
              .split(/\r?\n/)
              .map((file) => file.trim())
              .filter(Boolean);

            const formattedList = formattedFiles.length
              ? '\n\n**Files formatted:**\n' + formattedFiles.map((file) => `- \`${file}\``).join('\n')
              : '';

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `ðŸŽ¨ **Auto-formatted**: Files have been automatically formatted with treefmt to maintain code consistency.${formattedList}`
            });

      - name: Enable auto-merge for formatted PR
        if: steps.check-formatting.outputs.formatted == 'true' && github.event_name == 'pull_request'
        run: gh pr merge $PR_NUMBER --auto --merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
